//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.EntityClient;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Linq;
using System.Runtime.Serialization;
using System.Xml.Serialization;

[assembly: EdmSchemaAttribute()]
#region Метаданные связи EDM

[assembly: EdmRelationshipAttribute("u380982_astwodModel", "FK_Pages_Pages", "Pages", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(AStwoD.DAL.Entity_First_Model.astwod_Page), "Pages1", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(AStwoD.DAL.Entity_First_Model.astwod_Page), true)]

#endregion

namespace AStwoD.DAL.Entity_First_Model
{
    #region Контексты
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    public partial class u380982_astwodEntities : ObjectContext
    {
        #region Конструкторы
    
        /// <summary>
        /// Инициализирует новый объект u380982_astwodEntities, используя строку соединения из раздела "u380982_astwodEntities" файла конфигурации приложения.
        /// </summary>
        public u380982_astwodEntities() : base("name=u380982_astwodEntities", "u380982_astwodEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта u380982_astwodEntities.
        /// </summary>
        public u380982_astwodEntities(string connectionString) : base(connectionString, "u380982_astwodEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта u380982_astwodEntities.
        /// </summary>
        public u380982_astwodEntities(EntityConnection connection) : base(connection, "u380982_astwodEntities")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Разделяемые методы
    
        partial void OnContextCreated();
    
        #endregion
    
        #region Свойства ObjectSet
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<astwod_Page> astwod_Page
        {
            get
            {
                if ((_astwod_Page == null))
                {
                    _astwod_Page = base.CreateObjectSet<astwod_Page>("astwod_Page");
                }
                return _astwod_Page;
            }
        }
        private ObjectSet<astwod_Page> _astwod_Page;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<menuItemFromPage> menuItemFromPages
        {
            get
            {
                if ((_menuItemFromPages == null))
                {
                    _menuItemFromPages = base.CreateObjectSet<menuItemFromPage>("menuItemFromPages");
                }
                return _menuItemFromPages;
            }
        }
        private ObjectSet<menuItemFromPage> _menuItemFromPages;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Component> Components
        {
            get
            {
                if ((_Components == null))
                {
                    _Components = base.CreateObjectSet<Component>("Components");
                }
                return _Components;
            }
        }
        private ObjectSet<Component> _Components;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Template> Templates
        {
            get
            {
                if ((_Templates == null))
                {
                    _Templates = base.CreateObjectSet<Template>("Templates");
                }
                return _Templates;
            }
        }
        private ObjectSet<Template> _Templates;

        #endregion

        #region Методы AddTo
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet astwod_Page. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToastwod_Page(astwod_Page astwod_Page)
        {
            base.AddObject("astwod_Page", astwod_Page);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet menuItemFromPages. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddTomenuItemFromPages(menuItemFromPage menuItemFromPage)
        {
            base.AddObject("menuItemFromPages", menuItemFromPage);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Components. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToComponents(Component component)
        {
            base.AddObject("Components", component);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet Templates. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToTemplates(Template template)
        {
            base.AddObject("Templates", template);
        }

        #endregion

        #region Импортируемые функции
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectResult<astwod_Page> GetAllPages()
        {
            return base.ExecuteFunction<astwod_Page>("GetAllPages");
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="mergeOption"></param>
        public ObjectResult<astwod_Page> GetAllPages(MergeOption mergeOption)
        {
            return base.ExecuteFunction<astwod_Page>("GetAllPages", mergeOption);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="iD">Нет доступной документации по метаданным.</param>
        public ObjectResult<astwod_Page> GetPageByID(Nullable<global::System.Int32> iD)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<astwod_Page>("GetPageByID", iDParameter);
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="iD">Нет доступной документации по метаданным.</param>
        public ObjectResult<astwod_Page> GetPageByID(Nullable<global::System.Int32> iD, MergeOption mergeOption)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<astwod_Page>("GetPageByID", mergeOption, iDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="labelForURL">Нет доступной документации по метаданным.</param>
        /// <param name="labelForMenu">Нет доступной документации по метаданным.</param>
        /// <param name="title">Нет доступной документации по метаданным.</param>
        /// <param name="metaD">Нет доступной документации по метаданным.</param>
        /// <param name="metaK">Нет доступной документации по метаданным.</param>
        /// <param name="parentID">Нет доступной документации по метаданным.</param>
        /// <param name="content">Нет доступной документации по метаданным.</param>
        /// <param name="isMenu">Нет доступной документации по метаданным.</param>
        /// <param name="menuWeight">Нет доступной документации по метаданным.</param>
        /// <param name="dateCreation">Нет доступной документации по метаданным.</param>
        public int CreatePage(global::System.String labelForURL, global::System.String labelForMenu, global::System.String title, global::System.String metaD, global::System.String metaK, Nullable<global::System.Int32> parentID, global::System.String content, Nullable<global::System.Boolean> isMenu, Nullable<global::System.Byte> menuWeight, Nullable<global::System.DateTime> dateCreation)
        {
            ObjectParameter labelForURLParameter;
            if (labelForURL != null)
            {
                labelForURLParameter = new ObjectParameter("LabelForURL", labelForURL);
            }
            else
            {
                labelForURLParameter = new ObjectParameter("LabelForURL", typeof(global::System.String));
            }
    
            ObjectParameter labelForMenuParameter;
            if (labelForMenu != null)
            {
                labelForMenuParameter = new ObjectParameter("LabelForMenu", labelForMenu);
            }
            else
            {
                labelForMenuParameter = new ObjectParameter("LabelForMenu", typeof(global::System.String));
            }
    
            ObjectParameter titleParameter;
            if (title != null)
            {
                titleParameter = new ObjectParameter("Title", title);
            }
            else
            {
                titleParameter = new ObjectParameter("Title", typeof(global::System.String));
            }
    
            ObjectParameter metaDParameter;
            if (metaD != null)
            {
                metaDParameter = new ObjectParameter("MetaD", metaD);
            }
            else
            {
                metaDParameter = new ObjectParameter("MetaD", typeof(global::System.String));
            }
    
            ObjectParameter metaKParameter;
            if (metaK != null)
            {
                metaKParameter = new ObjectParameter("MetaK", metaK);
            }
            else
            {
                metaKParameter = new ObjectParameter("MetaK", typeof(global::System.String));
            }
    
            ObjectParameter parentIDParameter;
            if (parentID.HasValue)
            {
                parentIDParameter = new ObjectParameter("ParentID", parentID);
            }
            else
            {
                parentIDParameter = new ObjectParameter("ParentID", typeof(global::System.Int32));
            }
    
            ObjectParameter contentParameter;
            if (content != null)
            {
                contentParameter = new ObjectParameter("Content", content);
            }
            else
            {
                contentParameter = new ObjectParameter("Content", typeof(global::System.String));
            }
    
            ObjectParameter isMenuParameter;
            if (isMenu.HasValue)
            {
                isMenuParameter = new ObjectParameter("IsMenu", isMenu);
            }
            else
            {
                isMenuParameter = new ObjectParameter("IsMenu", typeof(global::System.Boolean));
            }
    
            ObjectParameter menuWeightParameter;
            if (menuWeight.HasValue)
            {
                menuWeightParameter = new ObjectParameter("MenuWeight", menuWeight);
            }
            else
            {
                menuWeightParameter = new ObjectParameter("MenuWeight", typeof(global::System.Byte));
            }
    
            ObjectParameter dateCreationParameter;
            if (dateCreation.HasValue)
            {
                dateCreationParameter = new ObjectParameter("DateCreation", dateCreation);
            }
            else
            {
                dateCreationParameter = new ObjectParameter("DateCreation", typeof(global::System.DateTime));
            }
    
            return base.ExecuteFunction("CreatePage", labelForURLParameter, labelForMenuParameter, titleParameter, metaDParameter, metaKParameter, parentIDParameter, contentParameter, isMenuParameter, menuWeightParameter, dateCreationParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="iD">Нет доступной документации по метаданным.</param>
        public int DeletePageByID(Nullable<global::System.Int32> iD)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction("DeletePageByID", iDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="parentID">Нет доступной документации по метаданным.</param>
        public ObjectResult<astwod_Page> GetPageByParentID(Nullable<global::System.Int32> parentID)
        {
            ObjectParameter parentIDParameter;
            if (parentID.HasValue)
            {
                parentIDParameter = new ObjectParameter("ParentID", parentID);
            }
            else
            {
                parentIDParameter = new ObjectParameter("ParentID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<astwod_Page>("GetPageByParentID", parentIDParameter);
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="parentID">Нет доступной документации по метаданным.</param>
        public ObjectResult<astwod_Page> GetPageByParentID(Nullable<global::System.Int32> parentID, MergeOption mergeOption)
        {
            ObjectParameter parentIDParameter;
            if (parentID.HasValue)
            {
                parentIDParameter = new ObjectParameter("ParentID", parentID);
            }
            else
            {
                parentIDParameter = new ObjectParameter("ParentID", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<astwod_Page>("GetPageByParentID", mergeOption, parentIDParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="iD">Нет доступной документации по метаданным.</param>
        /// <param name="labelForURL">Нет доступной документации по метаданным.</param>
        /// <param name="labelForMenu">Нет доступной документации по метаданным.</param>
        /// <param name="title">Нет доступной документации по метаданным.</param>
        /// <param name="metaD">Нет доступной документации по метаданным.</param>
        /// <param name="metaK">Нет доступной документации по метаданным.</param>
        /// <param name="parentID">Нет доступной документации по метаданным.</param>
        /// <param name="content">Нет доступной документации по метаданным.</param>
        /// <param name="isMenu">Нет доступной документации по метаданным.</param>
        /// <param name="menuWeight">Нет доступной документации по метаданным.</param>
        /// <param name="isRemove">Нет доступной документации по метаданным.</param>
        /// <param name="dateCreation">Нет доступной документации по метаданным.</param>
        public int UpdatePage(Nullable<global::System.Int32> iD, global::System.String labelForURL, global::System.String labelForMenu, global::System.String title, global::System.String metaD, global::System.String metaK, Nullable<global::System.Int32> parentID, global::System.String content, Nullable<global::System.Boolean> isMenu, Nullable<global::System.Byte> menuWeight, Nullable<global::System.Boolean> isRemove, Nullable<global::System.DateTime> dateCreation)
        {
            ObjectParameter iDParameter;
            if (iD.HasValue)
            {
                iDParameter = new ObjectParameter("ID", iD);
            }
            else
            {
                iDParameter = new ObjectParameter("ID", typeof(global::System.Int32));
            }
    
            ObjectParameter labelForURLParameter;
            if (labelForURL != null)
            {
                labelForURLParameter = new ObjectParameter("LabelForURL", labelForURL);
            }
            else
            {
                labelForURLParameter = new ObjectParameter("LabelForURL", typeof(global::System.String));
            }
    
            ObjectParameter labelForMenuParameter;
            if (labelForMenu != null)
            {
                labelForMenuParameter = new ObjectParameter("LabelForMenu", labelForMenu);
            }
            else
            {
                labelForMenuParameter = new ObjectParameter("LabelForMenu", typeof(global::System.String));
            }
    
            ObjectParameter titleParameter;
            if (title != null)
            {
                titleParameter = new ObjectParameter("Title", title);
            }
            else
            {
                titleParameter = new ObjectParameter("Title", typeof(global::System.String));
            }
    
            ObjectParameter metaDParameter;
            if (metaD != null)
            {
                metaDParameter = new ObjectParameter("MetaD", metaD);
            }
            else
            {
                metaDParameter = new ObjectParameter("MetaD", typeof(global::System.String));
            }
    
            ObjectParameter metaKParameter;
            if (metaK != null)
            {
                metaKParameter = new ObjectParameter("MetaK", metaK);
            }
            else
            {
                metaKParameter = new ObjectParameter("MetaK", typeof(global::System.String));
            }
    
            ObjectParameter parentIDParameter;
            if (parentID.HasValue)
            {
                parentIDParameter = new ObjectParameter("ParentID", parentID);
            }
            else
            {
                parentIDParameter = new ObjectParameter("ParentID", typeof(global::System.Int32));
            }
    
            ObjectParameter contentParameter;
            if (content != null)
            {
                contentParameter = new ObjectParameter("Content", content);
            }
            else
            {
                contentParameter = new ObjectParameter("Content", typeof(global::System.String));
            }
    
            ObjectParameter isMenuParameter;
            if (isMenu.HasValue)
            {
                isMenuParameter = new ObjectParameter("IsMenu", isMenu);
            }
            else
            {
                isMenuParameter = new ObjectParameter("IsMenu", typeof(global::System.Boolean));
            }
    
            ObjectParameter menuWeightParameter;
            if (menuWeight.HasValue)
            {
                menuWeightParameter = new ObjectParameter("MenuWeight", menuWeight);
            }
            else
            {
                menuWeightParameter = new ObjectParameter("MenuWeight", typeof(global::System.Byte));
            }
    
            ObjectParameter isRemoveParameter;
            if (isRemove.HasValue)
            {
                isRemoveParameter = new ObjectParameter("IsRemove", isRemove);
            }
            else
            {
                isRemoveParameter = new ObjectParameter("IsRemove", typeof(global::System.Boolean));
            }
    
            ObjectParameter dateCreationParameter;
            if (dateCreation.HasValue)
            {
                dateCreationParameter = new ObjectParameter("DateCreation", dateCreation);
            }
            else
            {
                dateCreationParameter = new ObjectParameter("DateCreation", typeof(global::System.DateTime));
            }
    
            return base.ExecuteFunction("UpdatePage", iDParameter, labelForURLParameter, labelForMenuParameter, titleParameter, metaDParameter, metaKParameter, parentIDParameter, contentParameter, isMenuParameter, menuWeightParameter, isRemoveParameter, dateCreationParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="labelForURL">Нет доступной документации по метаданным.</param>
        public ObjectResult<astwod_Page> GetPageByName(global::System.String labelForURL)
        {
            ObjectParameter labelForURLParameter;
            if (labelForURL != null)
            {
                labelForURLParameter = new ObjectParameter("LabelForURL", labelForURL);
            }
            else
            {
                labelForURLParameter = new ObjectParameter("LabelForURL", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<astwod_Page>("GetPageByName", labelForURLParameter);
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="labelForURL">Нет доступной документации по метаданным.</param>
        public ObjectResult<astwod_Page> GetPageByName(global::System.String labelForURL, MergeOption mergeOption)
        {
            ObjectParameter labelForURLParameter;
            if (labelForURL != null)
            {
                labelForURLParameter = new ObjectParameter("LabelForURL", labelForURL);
            }
            else
            {
                labelForURLParameter = new ObjectParameter("LabelForURL", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<astwod_Page>("GetPageByName", mergeOption, labelForURLParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="title">Нет доступной документации по метаданным.</param>
        public ObjectResult<astwod_Page> GetPagesByInputTitle(global::System.String title)
        {
            ObjectParameter titleParameter;
            if (title != null)
            {
                titleParameter = new ObjectParameter("Title", title);
            }
            else
            {
                titleParameter = new ObjectParameter("Title", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<astwod_Page>("GetPagesByInputTitle", titleParameter);
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="mergeOption"></param>
        /// <param name="title">Нет доступной документации по метаданным.</param>
        public ObjectResult<astwod_Page> GetPagesByInputTitle(global::System.String title, MergeOption mergeOption)
        {
            ObjectParameter titleParameter;
            if (title != null)
            {
                titleParameter = new ObjectParameter("Title", title);
            }
            else
            {
                titleParameter = new ObjectParameter("Title", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<astwod_Page>("GetPagesByInputTitle", mergeOption, titleParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="name">Нет доступной документации по метаданным.</param>
        /// <param name="label">Нет доступной документации по метаданным.</param>
        /// <param name="content">Нет доступной документации по метаданным.</param>
        public int CreateComponent(global::System.String name, global::System.String label, global::System.String content)
        {
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("name", typeof(global::System.String));
            }
    
            ObjectParameter labelParameter;
            if (label != null)
            {
                labelParameter = new ObjectParameter("label", label);
            }
            else
            {
                labelParameter = new ObjectParameter("label", typeof(global::System.String));
            }
    
            ObjectParameter contentParameter;
            if (content != null)
            {
                contentParameter = new ObjectParameter("content", content);
            }
            else
            {
                contentParameter = new ObjectParameter("content", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("CreateComponent", nameParameter, labelParameter, contentParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public int CreatePagesTable()
        {
            return base.ExecuteFunction("CreatePagesTable");
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="name">Нет доступной документации по метаданным.</param>
        public int CreateTemplate(global::System.String name)
        {
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("name", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("CreateTemplate", nameParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="id">Нет доступной документации по метаданным.</param>
        public int DeleteComponent(Nullable<global::System.Int32> id)
        {
            ObjectParameter idParameter;
            if (id.HasValue)
            {
                idParameter = new ObjectParameter("id", id);
            }
            else
            {
                idParameter = new ObjectParameter("id", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction("DeleteComponent", idParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectResult<GetAllComponents_Result> GetAllComponents()
        {
            return base.ExecuteFunction<GetAllComponents_Result>("GetAllComponents");
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="id">Нет доступной документации по метаданным.</param>
        public ObjectResult<GetComponent_Result> GetComponent(Nullable<global::System.Int32> id)
        {
            ObjectParameter idParameter;
            if (id.HasValue)
            {
                idParameter = new ObjectParameter("id", id);
            }
            else
            {
                idParameter = new ObjectParameter("id", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<GetComponent_Result>("GetComponent", idParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="name">Нет доступной документации по метаданным.</param>
        public ObjectResult<GetComponentByName_Result> GetComponentByName(global::System.String name)
        {
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("name", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<GetComponentByName_Result>("GetComponentByName", nameParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="id">Нет доступной документации по метаданным.</param>
        public ObjectResult<GetTemplateById_Result> GetTemplateById(Nullable<global::System.Int32> id)
        {
            ObjectParameter idParameter;
            if (id.HasValue)
            {
                idParameter = new ObjectParameter("id", id);
            }
            else
            {
                idParameter = new ObjectParameter("id", typeof(global::System.Int32));
            }
    
            return base.ExecuteFunction<GetTemplateById_Result>("GetTemplateById", idParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="name">Нет доступной документации по метаданным.</param>
        public ObjectResult<GetTemplateByName_Result> GetTemplateByName(global::System.String name)
        {
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("name", typeof(global::System.String));
            }
    
            return base.ExecuteFunction<GetTemplateByName_Result>("GetTemplateByName", nameParameter);
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectResult<GetTemplates_Result> GetTemplates()
        {
            return base.ExecuteFunction<GetTemplates_Result>("GetTemplates");
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        /// <param name="id">Нет доступной документации по метаданным.</param>
        /// <param name="name">Нет доступной документации по метаданным.</param>
        /// <param name="label">Нет доступной документации по метаданным.</param>
        /// <param name="content">Нет доступной документации по метаданным.</param>
        public int UpdateComponent(Nullable<global::System.Int32> id, global::System.String name, global::System.String label, global::System.String content)
        {
            ObjectParameter idParameter;
            if (id.HasValue)
            {
                idParameter = new ObjectParameter("id", id);
            }
            else
            {
                idParameter = new ObjectParameter("id", typeof(global::System.Int32));
            }
    
            ObjectParameter nameParameter;
            if (name != null)
            {
                nameParameter = new ObjectParameter("name", name);
            }
            else
            {
                nameParameter = new ObjectParameter("name", typeof(global::System.String));
            }
    
            ObjectParameter labelParameter;
            if (label != null)
            {
                labelParameter = new ObjectParameter("label", label);
            }
            else
            {
                labelParameter = new ObjectParameter("label", typeof(global::System.String));
            }
    
            ObjectParameter contentParameter;
            if (content != null)
            {
                contentParameter = new ObjectParameter("content", content);
            }
            else
            {
                contentParameter = new ObjectParameter("content", typeof(global::System.String));
            }
    
            return base.ExecuteFunction("UpdateComponent", idParameter, nameParameter, labelParameter, contentParameter);
        }

        #endregion

    }

    #endregion

    #region Сущности
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="u380982_astwodModel", Name="astwod_Page")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class astwod_Page : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта astwod_Page.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="isMenu">Исходное значение свойства IsMenu.</param>
        /// <param name="labelForURL">Исходное значение свойства LabelForURL.</param>
        /// <param name="isRemove">Исходное значение свойства IsRemove.</param>
        /// <param name="dateCreation">Исходное значение свойства DateCreation.</param>
        public static astwod_Page Createastwod_Page(global::System.Int32 id, global::System.Boolean isMenu, global::System.String labelForURL, global::System.Boolean isRemove, global::System.DateTime dateCreation)
        {
            astwod_Page astwod_Page = new astwod_Page();
            astwod_Page.ID = id;
            astwod_Page.IsMenu = isMenu;
            astwod_Page.LabelForURL = labelForURL;
            astwod_Page.IsRemove = isRemove;
            astwod_Page.DateCreation = dateCreation;
            return astwod_Page;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Title
        {
            get
            {
                return _Title;
            }
            set
            {
                OnTitleChanging(value);
                ReportPropertyChanging("Title");
                _Title = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Title");
                OnTitleChanged();
            }
        }
        private global::System.String _Title;
        partial void OnTitleChanging(global::System.String value);
        partial void OnTitleChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> ParentID
        {
            get
            {
                return _ParentID;
            }
            set
            {
                OnParentIDChanging(value);
                ReportPropertyChanging("ParentID");
                _ParentID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ParentID");
                OnParentIDChanged();
            }
        }
        private Nullable<global::System.Int32> _ParentID;
        partial void OnParentIDChanging(Nullable<global::System.Int32> value);
        partial void OnParentIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Content
        {
            get
            {
                return _Content;
            }
            set
            {
                OnContentChanging(value);
                ReportPropertyChanging("Content");
                _Content = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Content");
                OnContentChanged();
            }
        }
        private global::System.String _Content;
        partial void OnContentChanging(global::System.String value);
        partial void OnContentChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Byte> MenuWeight
        {
            get
            {
                return _MenuWeight;
            }
            set
            {
                OnMenuWeightChanging(value);
                ReportPropertyChanging("MenuWeight");
                _MenuWeight = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MenuWeight");
                OnMenuWeightChanged();
            }
        }
        private Nullable<global::System.Byte> _MenuWeight;
        partial void OnMenuWeightChanging(Nullable<global::System.Byte> value);
        partial void OnMenuWeightChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsMenu
        {
            get
            {
                return _IsMenu;
            }
            set
            {
                OnIsMenuChanging(value);
                ReportPropertyChanging("IsMenu");
                _IsMenu = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsMenu");
                OnIsMenuChanged();
            }
        }
        private global::System.Boolean _IsMenu;
        partial void OnIsMenuChanging(global::System.Boolean value);
        partial void OnIsMenuChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String LabelForURL
        {
            get
            {
                return _LabelForURL;
            }
            set
            {
                OnLabelForURLChanging(value);
                ReportPropertyChanging("LabelForURL");
                _LabelForURL = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("LabelForURL");
                OnLabelForURLChanged();
            }
        }
        private global::System.String _LabelForURL;
        partial void OnLabelForURLChanging(global::System.String value);
        partial void OnLabelForURLChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String LabelForMenu
        {
            get
            {
                return _LabelForMenu;
            }
            set
            {
                OnLabelForMenuChanging(value);
                ReportPropertyChanging("LabelForMenu");
                _LabelForMenu = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("LabelForMenu");
                OnLabelForMenuChanged();
            }
        }
        private global::System.String _LabelForMenu;
        partial void OnLabelForMenuChanging(global::System.String value);
        partial void OnLabelForMenuChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String MetaDescription
        {
            get
            {
                return _MetaDescription;
            }
            set
            {
                OnMetaDescriptionChanging(value);
                ReportPropertyChanging("MetaDescription");
                _MetaDescription = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("MetaDescription");
                OnMetaDescriptionChanged();
            }
        }
        private global::System.String _MetaDescription;
        partial void OnMetaDescriptionChanging(global::System.String value);
        partial void OnMetaDescriptionChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String MetaKeywords
        {
            get
            {
                return _MetaKeywords;
            }
            set
            {
                OnMetaKeywordsChanging(value);
                ReportPropertyChanging("MetaKeywords");
                _MetaKeywords = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("MetaKeywords");
                OnMetaKeywordsChanged();
            }
        }
        private global::System.String _MetaKeywords;
        partial void OnMetaKeywordsChanging(global::System.String value);
        partial void OnMetaKeywordsChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsRemove
        {
            get
            {
                return _IsRemove;
            }
            set
            {
                OnIsRemoveChanging(value);
                ReportPropertyChanging("IsRemove");
                _IsRemove = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("IsRemove");
                OnIsRemoveChanged();
            }
        }
        private global::System.Boolean _IsRemove;
        partial void OnIsRemoveChanging(global::System.Boolean value);
        partial void OnIsRemoveChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime DateCreation
        {
            get
            {
                return _DateCreation;
            }
            set
            {
                OnDateCreationChanging(value);
                ReportPropertyChanging("DateCreation");
                _DateCreation = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateCreation");
                OnDateCreationChanged();
            }
        }
        private global::System.DateTime _DateCreation;
        partial void OnDateCreationChanging(global::System.DateTime value);
        partial void OnDateCreationChanged();

        #endregion

    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("u380982_astwodModel", "FK_Pages_Pages", "Pages1")]
        public EntityCollection<astwod_Page> Pages1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<astwod_Page>("u380982_astwodModel.FK_Pages_Pages", "Pages1");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<astwod_Page>("u380982_astwodModel.FK_Pages_Pages", "Pages1", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("u380982_astwodModel", "FK_Pages_Pages", "Pages")]
        public astwod_Page Page1
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<astwod_Page>("u380982_astwodModel.FK_Pages_Pages", "Pages").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<astwod_Page>("u380982_astwodModel.FK_Pages_Pages", "Pages").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<astwod_Page> Page1Reference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<astwod_Page>("u380982_astwodModel.FK_Pages_Pages", "Pages");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<astwod_Page>("u380982_astwodModel.FK_Pages_Pages", "Pages", value);
                }
            }
        }

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="u380982_astwodModel", Name="Component")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Component : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Component.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="label">Исходное значение свойства Label.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        public static Component CreateComponent(global::System.Int32 id, global::System.String label, global::System.String name)
        {
            Component component = new Component();
            component.ID = id;
            component.Label = label;
            component.Name = name;
            return component;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Label
        {
            get
            {
                return _Label;
            }
            set
            {
                if (_Label != value)
                {
                    OnLabelChanging(value);
                    ReportPropertyChanging("Label");
                    _Label = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Label");
                    OnLabelChanged();
                }
            }
        }
        private global::System.String _Label;
        partial void OnLabelChanging(global::System.String value);
        partial void OnLabelChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                if (_Name != value)
                {
                    OnNameChanging(value);
                    ReportPropertyChanging("Name");
                    _Name = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("Name");
                    OnNameChanged();
                }
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Content
        {
            get
            {
                return _Content;
            }
            set
            {
                OnContentChanging(value);
                ReportPropertyChanging("Content");
                _Content = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Content");
                OnContentChanged();
            }
        }
        private global::System.String _Content;
        partial void OnContentChanging(global::System.String value);
        partial void OnContentChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="u380982_astwodModel", Name="menuItemFromPage")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class menuItemFromPage : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта menuItemFromPage.
        /// </summary>
        /// <param name="isMenu">Исходное значение свойства IsMenu.</param>
        /// <param name="id">Исходное значение свойства ID.</param>
        public static menuItemFromPage CreatemenuItemFromPage(global::System.Boolean isMenu, global::System.Int32 id)
        {
            menuItemFromPage menuItemFromPage = new menuItemFromPage();
            menuItemFromPage.IsMenu = isMenu;
            menuItemFromPage.ID = id;
            return menuItemFromPage;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Boolean IsMenu
        {
            get
            {
                return _IsMenu;
            }
            set
            {
                if (_IsMenu != value)
                {
                    OnIsMenuChanging(value);
                    ReportPropertyChanging("IsMenu");
                    _IsMenu = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("IsMenu");
                    OnIsMenuChanged();
                }
            }
        }
        private global::System.Boolean _IsMenu;
        partial void OnIsMenuChanging(global::System.Boolean value);
        partial void OnIsMenuChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Byte> MenuWeight
        {
            get
            {
                return _MenuWeight;
            }
            set
            {
                OnMenuWeightChanging(value);
                ReportPropertyChanging("MenuWeight");
                _MenuWeight = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MenuWeight");
                OnMenuWeightChanged();
            }
        }
        private Nullable<global::System.Byte> _MenuWeight;
        partial void OnMenuWeightChanging(Nullable<global::System.Byte> value);
        partial void OnMenuWeightChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Int32> ParentID
        {
            get
            {
                return _ParentID;
            }
            set
            {
                OnParentIDChanging(value);
                ReportPropertyChanging("ParentID");
                _ParentID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ParentID");
                OnParentIDChanged();
            }
        }
        private Nullable<global::System.Int32> _ParentID;
        partial void OnParentIDChanging(Nullable<global::System.Int32> value);
        partial void OnParentIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String LabelForURL
        {
            get
            {
                return _LabelForURL;
            }
            set
            {
                OnLabelForURLChanging(value);
                ReportPropertyChanging("LabelForURL");
                _LabelForURL = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("LabelForURL");
                OnLabelForURLChanged();
            }
        }
        private global::System.String _LabelForURL;
        partial void OnLabelForURLChanging(global::System.String value);
        partial void OnLabelForURLChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String LabelForMenu
        {
            get
            {
                return _LabelForMenu;
            }
            set
            {
                OnLabelForMenuChanging(value);
                ReportPropertyChanging("LabelForMenu");
                _LabelForMenu = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("LabelForMenu");
                OnLabelForMenuChanged();
            }
        }
        private global::System.String _LabelForMenu;
        partial void OnLabelForMenuChanging(global::System.String value);
        partial void OnLabelForMenuChanged();

        #endregion

    
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="u380982_astwodModel", Name="Template")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Template : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Template.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        public static Template CreateTemplate(global::System.Int32 id)
        {
            Template template = new Template();
            template.Id = id;
            return template;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion

    
    }

    #endregion

    #region ComplexTypes
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmComplexTypeAttribute(NamespaceName="u380982_astwodModel", Name="GetAllComponents_Result")]
    [DataContractAttribute(IsReference=true)]
    [Serializable()]
    public partial class GetAllComponents_Result : ComplexObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта GetAllComponents_Result.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="label">Исходное значение свойства Label.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        public static GetAllComponents_Result CreateGetAllComponents_Result(global::System.Int32 id, global::System.String label, global::System.String name)
        {
            GetAllComponents_Result getAllComponents_Result = new GetAllComponents_Result();
            getAllComponents_Result.ID = id;
            getAllComponents_Result.Label = label;
            getAllComponents_Result.Name = name;
            return getAllComponents_Result;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                OnIDChanging(value);
                ReportPropertyChanging("ID");
                _ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ID");
                OnIDChanged();
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Label
        {
            get
            {
                return _Label;
            }
            set
            {
                OnLabelChanging(value);
                ReportPropertyChanging("Label");
                _Label = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Label");
                OnLabelChanged();
            }
        }
        private global::System.String _Label;
        partial void OnLabelChanging(global::System.String value);
        partial void OnLabelChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Content
        {
            get
            {
                return _Content;
            }
            set
            {
                OnContentChanging(value);
                ReportPropertyChanging("Content");
                _Content = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Content");
                OnContentChanged();
            }
        }
        private global::System.String _Content;
        partial void OnContentChanging(global::System.String value);
        partial void OnContentChanged();

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmComplexTypeAttribute(NamespaceName="u380982_astwodModel", Name="GetComponent_Result")]
    [DataContractAttribute(IsReference=true)]
    [Serializable()]
    public partial class GetComponent_Result : ComplexObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта GetComponent_Result.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="label">Исходное значение свойства Label.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        public static GetComponent_Result CreateGetComponent_Result(global::System.Int32 id, global::System.String label, global::System.String name)
        {
            GetComponent_Result getComponent_Result = new GetComponent_Result();
            getComponent_Result.ID = id;
            getComponent_Result.Label = label;
            getComponent_Result.Name = name;
            return getComponent_Result;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                OnIDChanging(value);
                ReportPropertyChanging("ID");
                _ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ID");
                OnIDChanged();
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Label
        {
            get
            {
                return _Label;
            }
            set
            {
                OnLabelChanging(value);
                ReportPropertyChanging("Label");
                _Label = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Label");
                OnLabelChanged();
            }
        }
        private global::System.String _Label;
        partial void OnLabelChanging(global::System.String value);
        partial void OnLabelChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Content
        {
            get
            {
                return _Content;
            }
            set
            {
                OnContentChanging(value);
                ReportPropertyChanging("Content");
                _Content = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Content");
                OnContentChanged();
            }
        }
        private global::System.String _Content;
        partial void OnContentChanging(global::System.String value);
        partial void OnContentChanged();

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmComplexTypeAttribute(NamespaceName="u380982_astwodModel", Name="GetComponentByName_Result")]
    [DataContractAttribute(IsReference=true)]
    [Serializable()]
    public partial class GetComponentByName_Result : ComplexObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта GetComponentByName_Result.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="label">Исходное значение свойства Label.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        public static GetComponentByName_Result CreateGetComponentByName_Result(global::System.Int32 id, global::System.String label, global::System.String name)
        {
            GetComponentByName_Result getComponentByName_Result = new GetComponentByName_Result();
            getComponentByName_Result.ID = id;
            getComponentByName_Result.Label = label;
            getComponentByName_Result.Name = name;
            return getComponentByName_Result;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                OnIDChanging(value);
                ReportPropertyChanging("ID");
                _ID = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ID");
                OnIDChanged();
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Label
        {
            get
            {
                return _Label;
            }
            set
            {
                OnLabelChanging(value);
                ReportPropertyChanging("Label");
                _Label = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Label");
                OnLabelChanged();
            }
        }
        private global::System.String _Label;
        partial void OnLabelChanging(global::System.String value);
        partial void OnLabelChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Content
        {
            get
            {
                return _Content;
            }
            set
            {
                OnContentChanging(value);
                ReportPropertyChanging("Content");
                _Content = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Content");
                OnContentChanged();
            }
        }
        private global::System.String _Content;
        partial void OnContentChanging(global::System.String value);
        partial void OnContentChanged();

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmComplexTypeAttribute(NamespaceName="u380982_astwodModel", Name="GetTemplateById_Result")]
    [DataContractAttribute(IsReference=true)]
    [Serializable()]
    public partial class GetTemplateById_Result : ComplexObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта GetTemplateById_Result.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        public static GetTemplateById_Result CreateGetTemplateById_Result(global::System.Int32 id)
        {
            GetTemplateById_Result getTemplateById_Result = new GetTemplateById_Result();
            getTemplateById_Result.Id = id;
            return getTemplateById_Result;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                OnIdChanging(value);
                ReportPropertyChanging("Id");
                _Id = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Id");
                OnIdChanged();
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmComplexTypeAttribute(NamespaceName="u380982_astwodModel", Name="GetTemplateByName_Result")]
    [DataContractAttribute(IsReference=true)]
    [Serializable()]
    public partial class GetTemplateByName_Result : ComplexObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта GetTemplateByName_Result.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        public static GetTemplateByName_Result CreateGetTemplateByName_Result(global::System.Int32 id)
        {
            GetTemplateByName_Result getTemplateByName_Result = new GetTemplateByName_Result();
            getTemplateByName_Result.Id = id;
            return getTemplateByName_Result;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                OnIdChanging(value);
                ReportPropertyChanging("Id");
                _Id = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Id");
                OnIdChanged();
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion

    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmComplexTypeAttribute(NamespaceName="u380982_astwodModel", Name="GetTemplates_Result")]
    [DataContractAttribute(IsReference=true)]
    [Serializable()]
    public partial class GetTemplates_Result : ComplexObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта GetTemplates_Result.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        public static GetTemplates_Result CreateGetTemplates_Result(global::System.Int32 id)
        {
            GetTemplates_Result getTemplates_Result = new GetTemplates_Result();
            getTemplates_Result.Id = id;
            return getTemplates_Result;
        }

        #endregion

        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                OnIdChanging(value);
                ReportPropertyChanging("Id");
                _Id = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Id");
                OnIdChanged();
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion

    }

    #endregion

    
}
